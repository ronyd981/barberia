{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\barberia\\\\client\\\\src\\\\pages\\\\PrivateRoute.jsx\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport decode from \"jwt-decode\";\nimport Cookies from \"universal-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cookies = new Cookies();\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  const auth = cookies.set(\"token\");\n\n  if (auth) {\n    /*#__PURE__*/\n    _jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this);\n  } else {\n    /*#__PURE__*/\n    _jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }, this);\n  } // const isAuthenticated = () => {\n  //   let isValid = true;\n  //   try {\n  //     isValid = decode(auth);\n  //   } catch (error) {\n  //     return false;\n  //   }\n  //   return isValid;\n  // };\n  // const MyRoute = (props) =>\n  //   isAuthenticated() ? <Route {...props} /> : <Redirect to=\"/login\" />;\n  // return <MyRoute {...rest} component={Component} />;\n\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/xampp/htdocs/barberia/client/src/pages/PrivateRoute.jsx"],"names":["React","Route","Redirect","decode","Cookies","cookies","PrivateRoute","component","Component","rest","auth","set"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AAEA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;;AAEA,MAAME,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAC1D,QAAMC,IAAI,GAAGL,OAAO,CAACM,GAAR,CAAY,OAAZ,CAAb;;AAEA,MAAID,IAAJ,EAAU;AACR;AAAA,YAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AACD,GAFD,MAEO;AACL;AAAA,YAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AACD,GAPyD,CAS1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACD,CAvBD;;KAAMJ,Y;AAyBN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport decode from \"jwt-decode\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  const auth = cookies.set(\"token\");\r\n\r\n  if (auth) {\r\n    <Redirect to=\"/\" />;\r\n  } else {\r\n    <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  // const isAuthenticated = () => {\r\n  //   let isValid = true;\r\n  //   try {\r\n  //     isValid = decode(auth);\r\n  //   } catch (error) {\r\n  //     return false;\r\n  //   }\r\n  //   return isValid;\r\n  // };\r\n\r\n  // const MyRoute = (props) =>\r\n  //   isAuthenticated() ? <Route {...props} /> : <Redirect to=\"/login\" />;\r\n\r\n  // return <MyRoute {...rest} component={Component} />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n"]},"metadata":{},"sourceType":"module"}